version: '2'
services:
  postgres:
    image: postgres
    container_name: postgres
    restart: always
    volumes:
      - db_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: postgrespassword
    ports:
      - "5432:5432"
    networks:
      - db
  hasura:
    image: hasura/graphql-engine:v2.1.1
    container_name: hasura
    ports:
      - "8080:8080"
    depends_on:
      - "postgres"
    restart: always
    environment:
      ## postgres database to store Hasura metadata
      HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://root:postgrespassword@postgres:5432/postgres
      ## this env var can be used to add the above postgres database to Hasura as a data source. this can be removed/updated based on your needs
      PG_DATABASE_URL: postgres://root:postgrespassword@postgres:5432/postgres
      ## enable the console served by server
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true" # set to "false" to disable console
      ## enable debugging mode. It is recommended to disable this in production
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      ## uncomment next line to set an admin secret
      # HASURA_GRAPHQL_ADMIN_SECRET: myadminsecretkey
      HASURA_GRAPHQL_DATABASE_URL: postgres://root:postgrespassword@postgres:5432/root
    networks:
      - reverse
      - db
  nginx:
    image: nginx:latest
    container_name: nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    ports:
      - "80:80"
    depends_on:
      - hasura
    command: [nginx-debug, '-g', 'daemon off;']
    networks:
      - reverse
  redis:
    image: "redis:alpine"
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - db
  server:
    build: "server"
    container_name: server
    restart: always
    environment:
      PORT: 3100
      DB_HOST: postgres
      DB_USER: root
      DB_PASSWORD: postgrespassword
      DB_DATABASE: root
      REDIS: redis
    depends_on:
      - redis
      - postgres
    ports:
      - "3100:3100"
    networks:
      - db
      - reverse
  client:
    build: "client"
    container_name: client
    restart: always
    ports:
      - "5000:5000"
    networks:
      - reverse
volumes:
  db_data:
networks:
  reverse:
    driver: bridge
  db:
    driver: bridge


